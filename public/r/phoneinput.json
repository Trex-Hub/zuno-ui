{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "phoneinput",
  "type": "registry:component",
  "description": "A Phone Input Component with Country Selector and Search",
  "dependencies": [
    "fuse.js",
    "react-phone-input-2"
  ],
  "registryDependencies": [
    "button",
    "command",
    "input",
    "popover",
    "scroll-area"
  ],
  "files": [
    {
      "path": "registry/new-york/components/phone-input/phone-input.tsx",
      "content": "import * as React from \"react\";\nimport { ChevronDown, Check } from \"lucide-react\";\nimport * as RPNInput from \"react-phone-number-input\";\nimport flags from \"react-phone-number-input/flags\";\nimport Fuse from \"fuse.js\";\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/new-york/ui/command\";\nimport { Input } from \"@/registry/new-york/ui/input\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/new-york/ui/popover\";\nimport { ScrollArea } from \"@/registry/new-york/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\n\ntype PhoneInputProps = Omit<\n  React.ComponentProps<\"input\">,\n  \"onChange\" | \"value\" | \"ref\"\n> &\n  Omit<RPNInput.Props<typeof RPNInput.default>, \"onChange\"> & {\n    onChange?: (value: RPNInput.Value) => void;\n  };\n\nconst PhoneInput: React.ForwardRefExoticComponent<PhoneInputProps> =\n  React.forwardRef<React.ElementRef<typeof RPNInput.default>, PhoneInputProps>(\n    ({ className, onChange, ...props }, ref) => {\n      return (\n        <RPNInput.default\n          ref={ref}\n          className={cn(\"flex\", className)}\n          flagComponent={FlagComponent}\n          countrySelectComponent={CountrySelect}\n          inputComponent={InputComponent}\n          smartCaret={false}\n          onChange={(value) => onChange?.(value || (\"\" as RPNInput.Value))}\n          {...props}\n        />\n      );\n    }\n  );\nPhoneInput.displayName = \"PhoneInput\";\n\nconst InputComponent = React.forwardRef<\n  HTMLInputElement,\n  React.ComponentProps<\"input\">\n>(({ className, ...props }, ref) => (\n  <Input\n    className={cn(\"rounded-e-lg rounded-s-none\", className)}\n    {...props}\n    ref={ref}\n  />\n));\nInputComponent.displayName = \"InputComponent\";\n\ntype CountryEntry = {\n  label: string;\n  value: RPNInput.Country | undefined;\n  code: string;\n};\n\ntype CountrySelectProps = {\n  disabled?: boolean;\n  value: RPNInput.Country;\n  options: CountryEntry[];\n  onChange: (country: RPNInput.Country) => void;\n};\n\nconst CountrySelect = ({\n  disabled,\n  value: selectedCountry,\n  options: rawCountryList,\n  onChange,\n}: CountrySelectProps) => {\n  const [open, setOpen] = React.useState(false);\n  const [inputValue, setInputValue] = React.useState(\"\");\n\n  const countryList = React.useMemo(\n    () =>\n      rawCountryList.map((country) => ({\n        ...country,\n        code: country.value\n          ? `+${RPNInput.getCountryCallingCode(country.value)}`\n          : \"\",\n      })),\n    [rawCountryList]\n  );\n\n  const fuse = React.useMemo(\n    () =>\n      new Fuse(countryList, {\n        keys: [\"label\", \"value\", \"code\"],\n        threshold: 0.3,\n        ignoreLocation: true,\n      }),\n    [countryList]\n  );\n\n  const filteredCountries = React.useMemo(() => {\n    if (!inputValue) return countryList;\n    return fuse.search(inputValue).map((result) => result.item);\n  }, [fuse, inputValue, countryList]);\n\n  const handleOpenChange = (newOpen: boolean) => {\n    setOpen(newOpen);\n    if (!newOpen) {\n      setInputValue(\"\");\n    }\n  };\n\n  const getCountryCode = (country: RPNInput.Country | undefined) => {\n    try {\n      return country ? `+${RPNInput.getCountryCallingCode(country)}` : \"\";\n    } catch {\n      return \"\";\n    }\n  };\n\n  return (\n    <Popover open={open} onOpenChange={handleOpenChange}>\n      <PopoverTrigger asChild>\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          className=\"flex gap-1 rounded-e-none rounded-s-lg border-r-0 px-3 focus:z-10\"\n          disabled={disabled}\n        >\n          <FlagComponent\n            country={selectedCountry}\n            countryName={selectedCountry}\n          />\n          <span className=\"flex-1 text-sm px-1\">\n            {getCountryCode(selectedCountry)}\n          </span>\n          <ChevronDown\n            className={cn(\n              \"-mr-2 size-4 opacity-50\",\n              disabled ? \"hidden\" : \"opacity-100\"\n            )}\n          />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"p-0\" align=\"start\">\n        <Command shouldFilter={false}>\n          <CommandInput\n            placeholder=\"Search country or code...\"\n            value={inputValue}\n            onValueChange={setInputValue}\n          />\n          <CommandList>\n            <ScrollArea className=\"h-72\">\n              <CommandEmpty>No country found.</CommandEmpty>\n              <CommandGroup>\n                {filteredCountries.map(({ value, label, code }) =>\n                  label && value ? (\n                    <CommandItem\n                      key={value}\n                      onSelect={() => {\n                        onChange(value);\n                        setOpen(false);\n                      }}\n                    >\n                      <FlagComponent country={value} countryName={label} />\n                      <span className=\"flex-1 text-sm\">{label}</span>\n                      <span className=\"text-sm text-foreground/50\">{code}</span>\n                      <Check\n                        className={`ml-auto size-4 ${\n                          value === selectedCountry\n                            ? \"opacity-100\"\n                            : \"opacity-0\"\n                        }`}\n                      />\n                    </CommandItem>\n                  ) : null\n                )}\n              </CommandGroup>\n            </ScrollArea>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nconst FlagComponent = ({ country, countryName }: RPNInput.FlagProps) => {\n  const Flag = flags[country];\n\n  return (\n    <span className=\"flex h-4 w-6 overflow-hidden rounded-sm\">\n      {Flag && <Flag title={countryName} />}\n    </span>\n  );\n};\n\nexport { PhoneInput };\n",
      "type": "registry:component"
    }
  ]
}